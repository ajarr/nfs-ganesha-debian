--- nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/handle.c.orig	2016-09-27 08:25:33.912000000 -0400
+++ nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/handle.c	2016-09-27 08:33:25.388000000 -0400
@@ -799,7 +799,7 @@
 		next += 1;
 
 		LogDebug(COMPONENT_FSAL,
-		"nameP %s at offset %ld", name, (next - name));
+		"nameP %s at offset %ld", name, ((long)(next - name)));
 
 		if (entryCount >= *la_cookie) {
 			if ((((char *)entry - (char *)lr_names->entries) +
@@ -813,7 +813,7 @@
 				LogFullDebug(COMPONENT_FSAL,
 				   "out1 cookie %llu off %ld eof %d cookieverf %llx",
 				   (unsigned long long)*la_cookie,
-				   (next - name), *lr_eof,
+				   ((long)(next - name)), *lr_eof,
 				   (unsigned long long)*
 				   ((uint64_t *)la_cookieverf));
 
--- nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/file.c.orig	2016-09-27 08:47:38.220000000 -0400
+++ nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/file.c	2016-09-27 08:55:29.580000000 -0400
@@ -1127,9 +1127,9 @@
 	 */
 	if (lock_args.l_len < 0) {
 		LogCrit(COMPONENT_FSAL,
-			"The requested lock length is out of range- lock_args.l_len(%ld), request_lock_length(%"
-			PRIu64 ")",
-			lock_args.l_len, request_lock->lock_length);
+			"The requested lock length is out of range- lock_args.l_len(%"
+			PRIu64 "), request_lock_length(%" PRIu64 ")",
+			(uint64_t) lock_args.l_len, (uint64_t) request_lock->lock_length);
 		return fsalstat(ERR_FSAL_BAD_RANGE, 0);
 	}
 
@@ -1497,10 +1497,10 @@
 	}
 
 	LogFullDebug(COMPONENT_FSAL,
-		     "Locking: op:%d type:%d claim:%d start:%" PRIu64
-		     " length:%lu ", lock_op, request_lock->lock_type,
-		     request_lock->lock_reclaim, request_lock->lock_start,
-		     request_lock->lock_length);
+		     "Locking: op:%d type:%d claim:%d start:%"
+		     PRIu64 " length:%" PRIu64,
+		     lock_op, request_lock->lock_type, request_lock->lock_reclaim,
+		     request_lock->lock_start, request_lock->lock_length);
 
 	return GPFSFSAL_lock_op(op_ctx->fsal_export, obj_hdl, owner, lock_op,
 				*request_lock, conflicting_lock);
--- nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/fsal_up.c.orig	2016-09-27 09:04:45.076000000 -0400
+++ nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/fsal_up.c	2016-09-27 09:11:32.088000000 -0400
@@ -56,7 +56,7 @@
 	uint32_t expire_time_attr = 0;
 	uint32_t upflags = 0;
 	int errsv = 0;
-	fsal_status_t fsal_status;
+	fsal_status_t fsal_status = {0,};
 
 #ifdef _VALGRIND_MEMCHECK
 		memset(&handle, 0, sizeof(handle));
@@ -145,7 +145,8 @@
 		flags = flags & 0xffff;
 
 		LogDebug(COMPONENT_FSAL_UP,
-			 "inode update: rc %d reason %d update ino %ld flags:%x",
+			 "inode update: rc %d reason %d update ino %"
+			 PRId64 " flags:%x",
 			 rc, reason, callback.buf->st_ino, flags);
 
 		LogFullDebug(COMPONENT_FSAL_UP,
@@ -214,8 +215,8 @@
 
 		case BREAK_DELEGATION:	/* Delegation Event */
 			LogDebug(COMPONENT_FSAL_UP,
-				 "delegation recall: flags:%x ino %ld", flags,
-				 callback.buf->st_ino);
+				 "delegation recall: flags:%x ino %" PRId64,
+				 flags, callback.buf->st_ino);
 			fsal_status = up_async_delegrecall(general_fridge,
 						  event_func->up_export,
 						  &key, NULL, NULL);
@@ -229,8 +230,8 @@
 					.io_mode = LAYOUTIOMODE4_ANY
 				};
 				LogDebug(COMPONENT_FSAL_UP,
-					 "layout file recall: flags:%x ino %ld",
-					 flags, callback.buf->st_ino);
+					 "layout file recall: flags:%x ino %"
+					 PRId64, flags, callback.buf->st_ino);
 
 				fsal_status = up_async_layoutrecall(
 							general_fridge,
@@ -245,8 +246,8 @@
 
 		case LAYOUT_RECALL_ANY:	/* Recall all layouts Event */
 			LogDebug(COMPONENT_FSAL_UP,
-				 "layout recall any: flags:%x ino %ld", flags,
-				 callback.buf->st_ino);
+				 "layout recall any: flags:%x ino %" PRId64,
+				 flags, callback.buf->st_ino);
 
 	    /**
 	     * @todo This functionality needs to be implemented as a
@@ -260,8 +261,9 @@
 
 		case LAYOUT_NOTIFY_DEVICEID:	/* Device update Event */
 			LogDebug(COMPONENT_FSAL_UP,
-				"layout dev update: flags:%x ino %ld seq %d fd %d fsid 0x%"
-				PRIx64, flags,
+				"layout dev update: flags:%x ino %"
+				PRId64 " seq %d fd %d fsid 0x%" PRIx64,
+				flags,
 				callback.buf->st_ino,
 				devid.device_id2,
 				devid.device_id4,
@@ -284,7 +286,8 @@
 				struct attrlist attr;
 
 				LogMidDebug(COMPONENT_FSAL_UP,
-					    "inode update: flags:%x update ino %ld n_link:%d",
+					    "inode update: flags:%x update ino %"
+					    PRId64 " n_link:%d",
 					    flags, callback.buf->st_ino,
 					    (int)callback.buf->st_nlink);
 
@@ -396,8 +399,8 @@
 
 		case INODE_INVALIDATE:
 			LogMidDebug(COMPONENT_FSAL_UP,
-				    "inode invalidate: flags:%x update ino %ld",
-				    flags, callback.buf->st_ino);
+				    "inode invalidate: flags:%x update ino %"
+				    PRId64, flags, callback.buf->st_ino);
 
 			upflags = FSAL_UP_INVALIDATE_CACHE;
 			fsal_status = event_func->invalidate_close(
--- nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/fsal_convert.c.orig	2016-09-27 09:47:38.384000000 -0400
+++ nfs-ganesha-2.4.0/src/FSAL/FSAL_GPFS/fsal_convert.c	2016-09-27 09:46:34.252000000 -0400
@@ -43,7 +43,7 @@
 
 	p_buffstat = &gpfs_buf->buffstat;
 
-	LogDebug(COMPONENT_FSAL, "inode %ld", p_buffstat->st_ino);
+	LogDebug(COMPONENT_FSAL, "inode %" PRId64, p_buffstat->st_ino);
 
 	/* Fills the output struct */
 	if (FSAL_TEST_MASK(fsal_attr->mask, ATTR_TYPE)) {
